py_Vehicle.def("__bool__", [](Py_Vehicle t){return (BOOL)t.id;});
	py_Vehicle
		.def_property_readonly("acceleration", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_ACCELERATION(vehicle.id); })
		.def_property_readonly("are_all_windows_intact", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_ARE_ALL_VEHICLE_WINDOWS_INTACT(vehicle.id); })
		.def_property_readonly("attached_to_cargobob", [](Py_Vehicle cargobob) -> Py_Vehicle { return VEHICLE::GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob.id); })
		.def_property("boat_anchor", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_GET_BOAT_ANCHOR(vehicle.id); }, [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_BOAT_ANCHOR(vehicle.id,toggle); })
		.def_property("body_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_BODY_HEALTH(vehicle.id); }, [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::SET_VEHICLE_BODY_HEALTH(vehicle.id,value); })
		.def_property_readonly("cause_of_destruction", [](Py_Vehicle vehicle) -> Py_Hash { return VEHICLE::GET_VEHICLE_CAUSE_OF_DESTRUCTION(vehicle.id); })
		.def_property_readonly("class", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_CLASS(vehicle.id); })
		.def_property("colour_combination", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_COLOUR_COMBINATION(vehicle.id); }, [](Py_Vehicle vehicle,int numCombos) -> void { return VEHICLE::SET_VEHICLE_COLOUR_COMBINATION(vehicle.id,numCombos); })
		.def_property_readonly("convertible_roof_state", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_CONVERTIBLE_ROOF_STATE(vehicle.id); })
		.def_property("dirt_level", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_DIRT_LEVEL(vehicle.id); }, [](Py_Vehicle vehicle,float dirtLevel) -> void { return VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehicle.id,dirtLevel); })
		.def_property_readonly("door_lock_status", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_DOOR_LOCK_STATUS(vehicle.id); })
		.def_property("engine_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_ENGINE_HEALTH(vehicle.id); }, [](Py_Vehicle vehicle,float health) -> void { return VEHICLE::SET_VEHICLE_ENGINE_HEALTH(vehicle.id,health); })
		.def_property_readonly("entity_attached_to_tow_truck", [](Py_Vehicle towTruck) -> Py_Entity { return VEHICLE::GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck.id); })
		.def_property_readonly("heli_engine_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_HELI_ENGINE_HEALTH(vehicle.id); })
		.def_property_readonly("heli_main_rotor_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_HELI_MAIN_ROTOR_HEALTH(vehicle.id); })
		.def_property_readonly("heli_tail_rotor_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_HELI_TAIL_ROTOR_HEALTH(vehicle.id); })
		.def_property_readonly("is_alarm_activated", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ALARM_ACTIVATED(vehicle.id); })
		.def_property_readonly("is_any_seat_empty", [](Py_Vehicle veh) -> BOOL { return VEHICLE::_IS_ANY_VEHICLE_SEAT_EMPTY(veh.id); })
		.def_property_readonly("is_attached_to_trailer", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ATTACHED_TO_TRAILER(vehicle.id); })
		.def_property_readonly("is_big_vehicle", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_BIG_VEHICLE(vehicle.id); })
		.def_property_readonly("is_cargobob_hook_active", [](Py_Vehicle cargobob) -> BOOL { return VEHICLE::_IS_CARGOBOB_HOOK_ACTIVE(cargobob.id); })
		.def_property_readonly("is_cargobob_magnet_active", [](Py_Vehicle cargobob) -> BOOL { return VEHICLE::_IS_CARGOBOB_MAGNET_ACTIVE(cargobob.id); })
		.def_property_readonly("is_damaged", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_VEHICLE_DAMAGED(vehicle.id); })
		.def_property_readonly("is_engine_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_VEHICLE_ENGINE_ON(vehicle.id); })
		.def_property_readonly("is_headlight_l_broken", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_HEADLIGHT_L_BROKEN(vehicle.id); })
		.def_property_readonly("is_headlight_r_broken", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::_IS_HEADLIGHT_R_BROKEN(vehicle.id); })
		.def_property_readonly("is_in_burnout", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_IN_BURNOUT(vehicle.id); })
		.def_property_readonly("is_on_all_wheels", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(vehicle.id); })
		.def_property_readonly("is_primary_colour_custom", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(vehicle.id); })
		.def_property_readonly("is_searchlight_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_SEARCHLIGHT_ON(vehicle.id); })
		.def_property_readonly("is_secondary_colour_custom", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(vehicle.id); })
		.def_property_readonly("is_siren_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_SIREN_ON(vehicle.id); })
		.def_property("is_stolen", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STOLEN(vehicle.id); }, [](Py_Vehicle vehicle,BOOL isStolen) -> void { return VEHICLE::SET_VEHICLE_IS_STOLEN(vehicle.id,isStolen); })
		.def_property_readonly("is_stopped", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STOPPED(vehicle.id); })
		.def_property_readonly("is_stopped_at_traffic_lights", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(vehicle.id); })
		.def_property_readonly("is_stuck_on_roof", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_STUCK_ON_ROOF(vehicle.id); })
		.def_property_readonly("is_taxi_light_on", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_TAXI_LIGHT_ON(vehicle.id); })
		.def_property_readonly("is_visible", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_VISIBLE(vehicle.id); })
		.def_property("landing_gear", [](Py_Vehicle vehicle) -> int { return VEHICLE::_GET_VEHICLE_LANDING_GEAR(vehicle.id); }, [](Py_Vehicle vehicle,int state) -> void { return VEHICLE::_SET_VEHICLE_LANDING_GEAR(vehicle.id,state); })
		.def_property_readonly("layout_hash", [](Py_Vehicle vehicle) -> Py_Hash { return VEHICLE::GET_VEHICLE_LAYOUT_HASH(vehicle.id); })
		.def_property("livery", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_LIVERY(vehicle.id); }, [](Py_Vehicle vehicle,int livery) -> void { return VEHICLE::SET_VEHICLE_LIVERY(vehicle.id,livery); })
		.def_property_readonly("livery_count", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_LIVERY_COUNT(vehicle.id); })
		.def_property_readonly("max_braking", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_MAX_BRAKING(vehicle.id); })
		.def_property_readonly("max_number_of_passengers", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle.id); })
		.def_property_readonly("max_traction", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_MAX_TRACTION(vehicle.id); })
		.def_property("mod_kit", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_MOD_KIT(vehicle.id); }, [](Py_Vehicle vehicle,int modKit) -> void { return VEHICLE::SET_VEHICLE_MOD_KIT(vehicle.id,modKit); })
		.def_property_readonly("mod_kit_type", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_MOD_KIT_TYPE(vehicle.id); })
		.def_property_readonly("num_mod_kits", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_NUM_MOD_KITS(vehicle.id); })
		.def_property_readonly("number_of_colours", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_NUMBER_OF_VEHICLE_COLOURS(vehicle.id); })
		.def_property_readonly("number_of_passengers", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_NUMBER_OF_PASSENGERS(vehicle.id); })
		.def_property("number_plate_text", [](Py_Vehicle vehicle) -> char* { return VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT(vehicle.id); }, [](Py_Vehicle vehicle,char* plateText) -> void { return VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle.id,plateText); })
		.def_property("number_plate_text_index", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle.id); }, [](Py_Vehicle vehicle,int plateIndex) -> void { return VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle.id,plateIndex); })
		.def_property("paint_fade", [](Py_Vehicle veh) -> float { return VEHICLE::_GET_VEHICLE_PAINT_FADE(veh.id); }, [](Py_Vehicle veh,float fade) -> void { return VEHICLE::_SET_VEHICLE_PAINT_FADE(veh.id,fade); })
		.def_property("petrol_tank_health", [](Py_Vehicle vehicle) -> float { return VEHICLE::GET_VEHICLE_PETROL_TANK_HEALTH(vehicle.id); }, [](Py_Vehicle vehicle,float health) -> void { return VEHICLE::SET_VEHICLE_PETROL_TANK_HEALTH(vehicle.id,health); })
		.def_property_readonly("plate_type", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_PLATE_TYPE(vehicle.id); })
		.def_property_readonly("speed", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_VEHICLE_SPEED(vehicle.id); })
		.def_property_readonly("suspension_height", [](Py_Vehicle vehicle) -> float { return VEHICLE::_GET_VEHICLE_SUSPENSION_HEIGHT(vehicle.id); })
		.def_property("tyres_can_burst", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::GET_VEHICLE_TYRES_CAN_BURST(vehicle.id); }, [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(vehicle.id,toggle); })
		.def_property("wheel_type", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_WHEEL_TYPE(vehicle.id); }, [](Py_Vehicle vehicle,int WheelType) -> void { return VEHICLE::SET_VEHICLE_WHEEL_TYPE(vehicle.id,WheelType); })
		.def_property("window_tint", [](Py_Vehicle vehicle) -> int { return VEHICLE::GET_VEHICLE_WINDOW_TINT(vehicle.id); }, [](Py_Vehicle vehicle,int tint) -> void { return VEHICLE::SET_VEHICLE_WINDOW_TINT(vehicle.id,tint); })
		.def("set_alarm", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_ALARM(vehicle.id,state); })
		.def("set_allow_no_passengers_lockon", [](Py_Vehicle veh,BOOL p1) -> void { return VEHICLE::SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh.id,p1); })
		.def("set_brake_lights", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_BRAKE_LIGHTS(vehicle.id,Toggle); })
		.def("set_burnout", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_BURNOUT(vehicle.id,toggle); })
		.def("set_can_be_targetted", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_CAN_BE_TARGETTED(vehicle.id,state); })
		.def("set_can_be_visibly_damaged", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(vehicle.id,state); })
		.def("set_can_break", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_CAN_BREAK(vehicle.id,Toggle); })
		.def("set_can_respray_vehicle", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_CAN_RESPRAY_VEHICLE(vehicle.id,state); })
		.def("set_ceiling_height", [](Py_Vehicle vehicle,float p1) -> void { return VEHICLE::SET_VEHICLE_CEILING_HEIGHT(vehicle.id,p1); })
		.def("set_convertible_roof", [](Py_Vehicle vehicle,BOOL p1) -> void { return VEHICLE::SET_CONVERTIBLE_ROOF(vehicle.id,p1); })
		.def("set_disable_petrol_tank_damage", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(vehicle.id,toggle); })
		.def("set_disable_petrol_tank_fires", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(vehicle.id,toggle); })
		.def("set_doors_locked", [](Py_Vehicle vehicle,int doorLockStatus) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehicle.id,doorLockStatus); })
		.def("set_doors_locked_for_all_players", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(vehicle.id,toggle); })
		.def("set_doors_shut", [](Py_Vehicle vehicle,BOOL closeInstantly) -> void { return VEHICLE::SET_VEHICLE_DOORS_SHUT(vehicle.id,closeInstantly); })
		.def("set_engine_can_degrade", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle.id,toggle); })
		.def("set_engine_power_multiplier", [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::_SET_VEHICLE_ENGINE_POWER_MULTIPLIER(vehicle.id,value); })
		.def("set_engine_torque_multiplier", [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER(vehicle.id,value); })
		.def("set_explodes_on_high_explosion_damage", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(vehicle.id,toggle); })
		.def("set_forward_speed", [](Py_Vehicle vehicle,float speed) -> void { return VEHICLE::SET_VEHICLE_FORWARD_SPEED(vehicle.id,speed); })
		.def("set_friction_override", [](Py_Vehicle vehicle,float friction) -> void { return VEHICLE::SET_VEHICLE_FRICTION_OVERRIDE(vehicle.id,friction); })
		.def("set_fullbeam", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_FULLBEAM(vehicle.id,toggle); })
		.def("set_gravity", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_GRAVITY(vehicle.id,Toggle); })
		.def("set_handbrake", [](Py_Vehicle vehicle,BOOL Toggle) -> void { return VEHICLE::SET_VEHICLE_HANDBRAKE(vehicle.id,Toggle); })
		.def("set_has_been_owned_by_player", [](Py_Vehicle vehicle,BOOL owned) -> void { return VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle.id,owned); })
		.def("set_has_strong_axles", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_HAS_STRONG_AXLES(vehicle.id,toggle); })
		.def("set_heli_blades_speed", [](Py_Vehicle vehicle,float speed) -> void { return VEHICLE::SET_HELI_BLADES_SPEED(vehicle.id,speed); })
		.def("set_helicopter_roll_pitch_yaw_mult", [](Py_Vehicle helicopter,float multiplier) -> void { return VEHICLE::_SET_HELICOPTER_ROLL_PITCH_YAW_MULT(helicopter.id,multiplier); })
		.def("set_interiorlight", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_INTERIORLIGHT(vehicle.id,toggle); })
		.def("set_is_considered_by_player", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(vehicle.id,toggle); })
		.def("set_is_wanted", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_VEHICLE_IS_WANTED(vehicle.id,state); })
		.def("set_light_multiplier", [](Py_Vehicle vehicle,float multiplier) -> void { return VEHICLE::SET_VEHICLE_LIGHT_MULTIPLIER(vehicle.id,multiplier); })
		.def("set_lights", [](Py_Vehicle vehicle,int p1) -> void { return VEHICLE::SET_VEHICLE_LIGHTS(vehicle.id,p1); })
		.def("set_lod_multiplier", [](Py_Vehicle vehicle,float multiplier) -> void { return VEHICLE::SET_VEHICLE_LOD_MULTIPLIER(vehicle.id,multiplier); })
		.def("set_name_debug", [](Py_Vehicle vehicle,char* name) -> void { return VEHICLE::SET_VEHICLE_NAME_DEBUG(vehicle.id,name); })
		.def("set_needs_to_be_hotwired", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle.id,toggle); })
		.def("set_ped_enabled_bike_ringtone", [](Py_Vehicle vehicle,int ringtone) -> BOOL { return VEHICLE::SET_PED_ENABLED_BIKE_RINGTONE(vehicle.id,ringtone); })
		.def("set_provides_cover", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_PROVIDES_COVER(vehicle.id,toggle); })
		.def("set_reduce_grip", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_REDUCE_GRIP(vehicle.id,toggle); })
		.def("set_render_train_as_derailed", [](Py_Vehicle train,BOOL toggle) -> void { return VEHICLE::SET_RENDER_TRAIN_AS_DERAILED(train.id,toggle); })
		.def("set_rudder_broken", [](Py_Vehicle p0,BOOL p1) -> void { return VEHICLE::SET_VEHICLE_RUDDER_BROKEN(p0.id,p1); })
		.def("set_siren", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_SIREN(vehicle.id,toggle); })
		.def("set_steer_bias", [](Py_Vehicle vehicle,float value) -> void { return VEHICLE::SET_VEHICLE_STEER_BIAS(vehicle.id,value); })
		.def("set_strong", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_STRONG(vehicle.id,toggle); })
		.def("set_taxi_lights", [](Py_Vehicle vehicle,BOOL state) -> void { return VEHICLE::SET_TAXI_LIGHTS(vehicle.id,state); })
		.def("set_tow_truck_crane_raised", [](Py_Vehicle towTruck,float state) -> void { return VEHICLE::_SET_TOW_TRUCK_CRANE_RAISED(towTruck.id,state); })
		.def("set_train_cruise_speed", [](Py_Vehicle train,float speed) -> void { return VEHICLE::SET_TRAIN_CRUISE_SPEED(train.id,speed); })
		.def("set_train_speed", [](Py_Vehicle train,float speed) -> void { return VEHICLE::SET_TRAIN_SPEED(train.id,speed); })
		.def("set_tyre_fixed", [](Py_Vehicle vehicle,int tyreIndex) -> void { return VEHICLE::SET_VEHICLE_TYRE_FIXED(vehicle.id,tyreIndex); })
		.def("set_undriveable", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_UNDRIVEABLE(vehicle.id,toggle); })
		.def("set_wheels_can_break", [](Py_Vehicle vehicle,BOOL enabled) -> void { return VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(vehicle.id,enabled); })
		.def("add_upsidedown_check", [](Py_Vehicle vehicle) -> void { return VEHICLE::ADD_VEHICLE_UPSIDEDOWN_CHECK(vehicle.id); })
		.def("attach_to_cargobob", [](Py_Vehicle vehicle,Py_Vehicle cargobob,int p2,float x,float y,float z) -> void { return VEHICLE::ATTACH_VEHICLE_TO_CARGOBOB(vehicle.id,cargobob.id,p2,x,y,z); })
		.def("attach_to_tow_truck", [](Py_Vehicle towTruck,Py_Vehicle vehicle,BOOL rear,float hookOffsetX,float hookOffsetY,float hookOffsetZ) -> void { return VEHICLE::ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck.id,vehicle.id,rear,hookOffsetX,hookOffsetY,hookOffsetZ); })
		.def("attach_to_trailer", [](Py_Vehicle vehicle,Py_Vehicle trailer,float radius) -> void { return VEHICLE::ATTACH_VEHICLE_TO_TRAILER(vehicle.id,trailer.id,radius); })
		.def("can_shuffle_seat", [](Py_Vehicle vehicle,Py_Any p1) -> BOOL { return VEHICLE::CAN_SHUFFLE_SEAT(vehicle.id,p1.id); })
		.def("cargobob_magnet_grab_vehicle", [](Py_Vehicle cargobob,BOOL Grab) -> void { return VEHICLE::_CARGOBOB_MAGNET_GRAB_VEHICLE(cargobob.id,Grab); })
		.def("clear_custom_primary_colour", [](Py_Vehicle vehicle) -> void { return VEHICLE::CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle.id); })
		.def("clear_custom_secondary_colour", [](Py_Vehicle vehicle) -> void { return VEHICLE::CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle.id); })
		.def("detach_from_any_cargobob", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DETACH_VEHICLE_FROM_ANY_CARGOBOB(vehicle.id); })
		.def("detach_from_any_tow_truck", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(vehicle.id); })
		.def("detach_from_cargobob", [](Py_Vehicle vehicle,Py_Vehicle cargobob) -> void { return VEHICLE::DETACH_VEHICLE_FROM_CARGOBOB(vehicle.id,cargobob.id); })
		.def("detach_from_tow_truck", [](Py_Vehicle towTruck,Py_Vehicle vehicle) -> void { return VEHICLE::DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck.id,vehicle.id); })
		.def("detach_from_trailer", [](Py_Vehicle vehicle) -> void { return VEHICLE::DETACH_VEHICLE_FROM_TRAILER(vehicle.id); })
		.def("detach_windscreen", [](Py_Vehicle vehicleHandle) -> void { return VEHICLE::_DETACH_VEHICLE_WINDSCREEN(vehicleHandle.id); })
		.def("disable_impact_explosion_activation", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION(vehicle.id,toggle); })
		.def("does_extra_exist", [](Py_Vehicle vehicle,int extraId) -> BOOL { return VEHICLE::DOES_EXTRA_EXIST(vehicle.id,extraId); })
		.def("does_have_roof", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DOES_VEHICLE_HAVE_ROOF(vehicle.id); })
		.def("does_have_weapons", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::DOES_VEHICLE_HAVE_WEAPONS(vehicle.id); })
		.def("eject_jb700_roof", [](Py_Vehicle vehicle,float x,float y,float z) -> void { return VEHICLE::_EJECT_JB700_ROOF(vehicle.id,x,y,z); })
		.def("enable_cargobob_hook", [](Py_Vehicle cargobob,int state) -> void { return VEHICLE::_ENABLE_CARGOBOB_HOOK(cargobob.id,state); })
		.def("explode_in_cutscene", [](Py_Vehicle p0,BOOL p1) -> void { return VEHICLE::EXPLODE_VEHICLE_IN_CUTSCENE(p0.id,p1); })
		.def("explode_vehicle", [](Py_Vehicle vehicle,BOOL isAudible,BOOL isInvisible) -> void { return VEHICLE::EXPLODE_VEHICLE(vehicle.id,isAudible,isInvisible); })
		.def("fix_window", [](Py_Vehicle vehicle,int index) -> void { return VEHICLE::FIX_VEHICLE_WINDOW(vehicle.id,index); })
		.def("get_deformation_at_pos", [](Py_Vehicle vehicle,float position1,float position2,float position3) -> Vector3 { return VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(vehicle.id,position1,position2,position3); })
		.def("get_door_angle_ratio", [](Py_Vehicle vehicle,int door) -> float { return VEHICLE::GET_VEHICLE_DOOR_ANGLE_RATIO(vehicle.id,door); })
		.def("get_doors_locked_for_player", [](Py_Vehicle vehicle,Py_Player player) -> BOOL { return VEHICLE::GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle.id,player.id); })
		.def("get_last_ped_in_seat", [](Py_Vehicle vehicle,int seatIndex) -> Py_Ped { return VEHICLE::GET_LAST_PED_IN_VEHICLE_SEAT(vehicle.id,seatIndex); })
		.def("get_livery_name", [](Py_Vehicle vehicle,int liveryIndex) -> char* { return VEHICLE::GET_LIVERY_NAME(vehicle.id,liveryIndex); })
		.def("get_mod", [](Py_Vehicle vehicle,int modType) -> int { return VEHICLE::GET_VEHICLE_MOD(vehicle.id,modType); })
		.def("get_mod_modifier_value", [](Py_Vehicle vehicle,int modType,int modIndex) -> Py_Any { return VEHICLE::GET_VEHICLE_MOD_MODIFIER_VALUE(vehicle.id,modType,modIndex); })
		.def("get_mod_slot_name", [](Py_Vehicle vehicle,int modType) -> char* { return VEHICLE::GET_MOD_SLOT_NAME(vehicle.id,modType); })
		.def("get_mod_text_label", [](Py_Vehicle vehicle,int modType,int modValue) -> char* { return VEHICLE::GET_MOD_TEXT_LABEL(vehicle.id,modType,modValue); })
		.def("get_mod_variation", [](Py_Vehicle vehicle,int modType) -> BOOL { return VEHICLE::GET_VEHICLE_MOD_VARIATION(vehicle.id,modType); })
		.def("get_num_mods", [](Py_Vehicle vehicle,int modType) -> int { return VEHICLE::GET_NUM_VEHICLE_MODS(vehicle.id,modType); })
		.def("get_ped_in_seat", [](Py_Vehicle vehicle,int index) -> Py_Ped { return VEHICLE::GET_PED_IN_VEHICLE_SEAT(vehicle.id,index); })
		.def("get_ped_using_door", [](Py_Vehicle vehicle,int doorIndex) -> Py_Ped { return VEHICLE::_GET_PED_USING_VEHICLE_DOOR(vehicle.id,doorIndex); })
		.def("get_train_carriage", [](Py_Vehicle train,int carriage) -> Py_Entity { return VEHICLE::GET_TRAIN_CARRIAGE(train.id,carriage); })
		.def("is_a_convertible", [](Py_Vehicle vehicle,BOOL p1) -> BOOL { return VEHICLE::IS_VEHICLE_A_CONVERTIBLE(vehicle.id,p1); })
		.def("is_attached_to_cargobob", [](Py_Vehicle vehicle,Py_Vehicle cargobob) -> BOOL { return VEHICLE::IS_VEHICLE_ATTACHED_TO_CARGOBOB(vehicle.id,cargobob.id); })
		.def("is_attached_to_tow_truck", [](Py_Vehicle towTruck,Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck.id,vehicle.id); })
		.def("is_bumper_broken_off", [](Py_Vehicle vehicle,BOOL p1) -> BOOL { return VEHICLE::IS_VEHICLE_BUMPER_BROKEN_OFF(vehicle.id,p1); })
		.def("is_door_damaged", [](Py_Vehicle veh,int doorID) -> BOOL { return VEHICLE::IS_VEHICLE_DOOR_DAMAGED(veh.id,doorID); })
		.def("is_door_fully_open", [](Py_Vehicle vehicle,int doorIndex) -> BOOL { return VEHICLE::IS_VEHICLE_DOOR_FULLY_OPEN(vehicle.id,doorIndex); })
		.def("is_driveable", [](Py_Vehicle vehicle,BOOL p1) -> BOOL { return VEHICLE::IS_VEHICLE_DRIVEABLE(vehicle.id,p1); })
		.def("is_extra_turned_on", [](Py_Vehicle vehicle,int extraId) -> BOOL { return VEHICLE::IS_VEHICLE_EXTRA_TURNED_ON(vehicle.id,extraId); })
		.def("is_model", [](Py_Vehicle vehicle,Py_Hash hash) -> BOOL { return VEHICLE::IS_VEHICLE_MODEL(vehicle.id,hash.id); })
		.def("is_neon_light_enabled", [](Py_Vehicle vehicle,int index) -> BOOL { return VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(vehicle.id,index); })
		.def("is_seat_free", [](Py_Vehicle vehicle,int seatIndex) -> BOOL { return VEHICLE::IS_VEHICLE_SEAT_FREE(vehicle.id,seatIndex); })
		.def("is_stuck_timer_up", [](Py_Vehicle vehicle,int p1,int p2) -> BOOL { return VEHICLE::IS_VEHICLE_STUCK_TIMER_UP(vehicle.id,p1,p2); })
		.def("is_toggle_mod_on", [](Py_Vehicle vehicle,int modType) -> BOOL { return VEHICLE::IS_TOGGLE_MOD_ON(vehicle.id,modType); })
		.def("is_tyre_burst", [](Py_Vehicle vehicle,int wheelID,BOOL completely) -> BOOL { return VEHICLE::IS_VEHICLE_TYRE_BURST(vehicle.id,wheelID,completely); })
		.def("is_window_intact", [](Py_Vehicle vehicle,int windowIndex) -> BOOL { return VEHICLE::IS_VEHICLE_WINDOW_INTACT(vehicle.id,windowIndex); })
		.def("jitter_vehicle", [](Py_Vehicle vehicle,BOOL p1,float yaw,float pitch,float roll) -> void { return VEHICLE::_JITTER_VEHICLE(vehicle.id,p1,yaw,pitch,roll); })
		.def("lower_convertible_roof", [](Py_Vehicle vehicle,BOOL instantlyLower) -> void { return VEHICLE::LOWER_CONVERTIBLE_ROOF(vehicle.id,instantlyLower); })
		.def("raise_convertible_roof", [](Py_Vehicle vehicle,BOOL instantlyRaise) -> void { return VEHICLE::RAISE_CONVERTIBLE_ROOF(vehicle.id,instantlyRaise); })
		.def("remove_mod", [](Py_Vehicle vehicle,int modType) -> void { return VEHICLE::REMOVE_VEHICLE_MOD(vehicle.id,modType); })
		.def("remove_upsidedown_check", [](Py_Vehicle vehicle) -> void { return VEHICLE::REMOVE_VEHICLE_UPSIDEDOWN_CHECK(vehicle.id); })
		.def("remove_window", [](Py_Vehicle vehicle,int windowIndex) -> void { return VEHICLE::REMOVE_VEHICLE_WINDOW(vehicle.id,windowIndex); })
		.def("reset_stuck_timer", [](Py_Vehicle vehicle,BOOL nullAttributes) -> void { return VEHICLE::RESET_VEHICLE_STUCK_TIMER(vehicle.id,nullAttributes); })
		.def("retract_cargobob_hook", [](Py_Vehicle cargobob) -> void { return VEHICLE::_RETRACT_CARGOBOB_HOOK(cargobob.id); })
		.def("roll_down_window", [](Py_Vehicle vehicle,int windowIndex) -> void { return VEHICLE::ROLL_DOWN_WINDOW(vehicle.id,windowIndex); })
		.def("roll_down_windows", [](Py_Vehicle vehicle) -> void { return VEHICLE::ROLL_DOWN_WINDOWS(vehicle.id); })
		.def("roll_up_window", [](Py_Vehicle vehicle,int windowIndex) -> void { return VEHICLE::ROLL_UP_WINDOW(vehicle.id,windowIndex); })
		.def("set_all_vehicles_spawn", [](Py_Vehicle p0,BOOL p1,BOOL p2,BOOL p3) -> Py_Any { return VEHICLE::SET_ALL_VEHICLES_SPAWN(p0.id,p1,p2,p3); })
		.def("set_automatically_attaches", [](Py_Vehicle vehicle,Py_Any p1,Py_Any p2) -> Py_Any { return VEHICLE::SET_VEHICLE_AUTOMATICALLY_ATTACHES(vehicle.id,p1.id,p2.id); })
		.def("set_bike_lean_angle", [](Py_Vehicle vehicle,float x,float y) -> void { return VEHICLE::_SET_BIKE_LEAN_ANGLE(vehicle.id,x,y); })
		.def("set_colours", [](Py_Vehicle vehicle,int colorPrimary,int colorSecondary) -> void { return VEHICLE::SET_VEHICLE_COLOURS(vehicle.id,colorPrimary,colorSecondary); })
		.def("set_custom_primary_colour", [](Py_Vehicle vehicle,int r,int g,int b) -> void { return VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle.id,r,g,b); })
		.def("set_custom_secondary_colour", [](Py_Vehicle vehicle,int r,int g,int b) -> void { return VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle.id,r,g,b); })
		.def("set_damage", [](Py_Vehicle vehicle,float xOffset,float yOffset,float zOffset,float damage,float radius,BOOL p6) -> void { return VEHICLE::SET_VEHICLE_DAMAGE(vehicle.id,xOffset,yOffset,zOffset,damage,radius,p6); })
		.def("set_deformation_fixed", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(vehicle.id); })
		.def("set_door_breakable", [](Py_Vehicle vehicle,int doorIndex,BOOL isBreakable) -> void { return VEHICLE::_SET_VEHICLE_DOOR_BREAKABLE(vehicle.id,doorIndex,isBreakable); })
		.def("set_door_broken", [](Py_Vehicle vehicle,int doorIndex,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOOR_BROKEN(vehicle.id,doorIndex,toggle); })
		.def("set_door_control", [](Py_Vehicle vehicle,int doorIndex,Py_Any p2,float p3) -> void { return VEHICLE::SET_VEHICLE_DOOR_CONTROL(vehicle.id,doorIndex,p2.id,p3); })
		.def("set_door_latched", [](Py_Vehicle vehicle,int doorIndex,BOOL p2,BOOL p3,BOOL p4) -> void { return VEHICLE::SET_VEHICLE_DOOR_LATCHED(vehicle.id,doorIndex,p2,p3,p4); })
		.def("set_door_open", [](Py_Vehicle vehicle,int doorIndex,BOOL loose,BOOL openInstantly) -> void { return VEHICLE::SET_VEHICLE_DOOR_OPEN(vehicle.id,doorIndex,loose,openInstantly); })
		.def("set_door_shut", [](Py_Vehicle vehicle,int doorIndex,BOOL closeInstantly) -> void { return VEHICLE::SET_VEHICLE_DOOR_SHUT(vehicle.id,doorIndex,closeInstantly); })
		.def("set_doors_locked_for_player", [](Py_Vehicle vehicle,Py_Player player,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle.id,player.id,toggle); })
		.def("set_doors_locked_for_team", [](Py_Vehicle vehicle,int team,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(vehicle.id,team,toggle); })
		.def("set_engine_on", [](Py_Vehicle vehicle,BOOL value,BOOL instantly,BOOL unk) -> void { return VEHICLE::SET_VEHICLE_ENGINE_ON(vehicle.id,value,instantly,unk); })
		.def("set_exclusive_driver", [](Py_Vehicle vehicle,Py_Any p1,Py_Any p2) -> void { return VEHICLE::_SET_EXCLUSIVE_DRIVER(vehicle.id,p1.id,p2.id); })
		.def("set_extra", [](Py_Vehicle vehicle,int extraId,int toggle) -> void { return VEHICLE::SET_VEHICLE_EXTRA(vehicle.id,extraId,toggle); })
		.def("set_extra_colours", [](Py_Vehicle vehicle,int pearlescentColor,int wheelColor) -> void { return VEHICLE::SET_VEHICLE_EXTRA_COLOURS(vehicle.id,pearlescentColor,wheelColor); })
		.def("set_fixed", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_VEHICLE_FIXED(vehicle.id); })
		.def("set_heli_blades_full_speed", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehicle.id); })
		.def("set_indicator_lights", [](Py_Vehicle vehicle,int turnSignal,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_INDICATOR_LIGHTS(vehicle.id,turnSignal,toggle); })
		.def("set_mission_train_coords", [](Py_Vehicle train,float x,float y,float z) -> void { return VEHICLE::SET_MISSION_TRAIN_COORDS(train.id,x,y,z); })
		.def("set_mod", [](Py_Vehicle vehicle,int modType,int modIndex,BOOL customTires) -> void { return VEHICLE::SET_VEHICLE_MOD(vehicle.id,modType,modIndex,customTires); })
		.def("set_mod_color_1", [](Py_Vehicle vehicle,int paintType,int color,int p3) -> void { return VEHICLE::SET_VEHICLE_MOD_COLOR_1(vehicle.id,paintType,color,p3); })
		.def("set_mod_color_2", [](Py_Vehicle vehicle,int paintType,int color) -> void { return VEHICLE::SET_VEHICLE_MOD_COLOR_2(vehicle.id,paintType,color); })
		.def("set_neon_light_enabled", [](Py_Vehicle vehicle,int index,BOOL toggle) -> void { return VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(vehicle.id,index,toggle); })
		.def("set_neon_lights_colour", [](Py_Vehicle vehicle,int r,int g,int b) -> void { return VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(vehicle.id,r,g,b); })
		.def("set_on_ground_properly", [](Py_Vehicle vehicle) -> BOOL { return VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(vehicle.id); })
		.def("set_out_of_control", [](Py_Vehicle vehicle,BOOL killDriver,BOOL explodeOnImpact) -> void { return VEHICLE::SET_VEHICLE_OUT_OF_CONTROL(vehicle.id,killDriver,explodeOnImpact); })
		.def("set_ped_targettable_destroy", [](Py_Vehicle vehicle,int vehicleComponent,int destroyType) -> void { return VEHICLE::SET_PED_TARGETTABLE_VEHICLE_DESTROY(vehicle.id,vehicleComponent,destroyType); })
		.def("set_players_last_vehicle", [](Py_Vehicle vehicle) -> void { return VEHICLE::SET_PLAYERS_LAST_VEHICLE(vehicle.id); })
		.def("set_searchlight", [](Py_Vehicle vehicle,BOOL duskLight,BOOL p2) -> void { return VEHICLE::SET_VEHICLE_SEARCHLIGHT(vehicle.id,duskLight,p2); })
		.def("set_timed_explosion", [](Py_Vehicle vehicle,Py_Ped ped,BOOL toggle) -> void { return VEHICLE::SET_VEHICLE_TIMED_EXPLOSION(vehicle.id,ped.id,toggle); })
		.def("set_tyre_burst", [](Py_Vehicle vehicle,int index,BOOL on_rim,float p3) -> void { return VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle.id,index,on_rim,p3); })
		.def("smash_window", [](Py_Vehicle vehicle,int index) -> void { return VEHICLE::SMASH_VEHICLE_WINDOW(vehicle.id,index); })
		.def("start_alarm", [](Py_Vehicle vehicle) -> void { return VEHICLE::START_VEHICLE_ALARM(vehicle.id); })
		.def("start_horn", [](Py_Vehicle vehicle,int duration,Py_Hash mode,BOOL p3) -> void { return VEHICLE::START_VEHICLE_HORN(vehicle.id,duration,mode.id,p3); })
		.def("steer_unlock_bias", [](Py_Vehicle vehicle,BOOL toggle) -> void { return VEHICLE::STEER_UNLOCK_BIAS(vehicle.id,toggle); })
		.def("task_bring_to_halt", [](Py_Vehicle vehicle,float p1,Py_Any p2,BOOL p3) -> void { return VEHICLE::_TASK_BRING_VEHICLE_TO_HALT(vehicle.id,p1,p2.id,p3); })
		.def("toggle_mod", [](Py_Vehicle vehicle,int modType,BOOL toggle) -> void { return VEHICLE::TOGGLE_VEHICLE_MOD(vehicle.id,modType,toggle); })
		.def("track_visibility", [](Py_Vehicle vehicle) -> void { return VEHICLE::TRACK_VEHICLE_VISIBILITY(vehicle.id); })
		.def_static("add_stuck_check_with_warp", [](Py_Any p0,float p1,Py_Any p2,BOOL p3,BOOL p4,BOOL p5,Py_Any p6) -> void { return VEHICLE::ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0.id,p1,p2.id,p3,p4,p5,p6.id); })
		.def_static("create_mission_train", [](int variation,float x,float y,float z,BOOL direction) -> Py_Vehicle { return VEHICLE::CREATE_MISSION_TRAIN(variation,x,y,z,direction); })
		.def_static("create_script_generator", [](float x,float y,float z,float heading,float p4,float p5,Py_Hash modelHash,int p7,int p8,int p9,int p10,BOOL p11,BOOL p12,BOOL p13,BOOL p14,BOOL p15,int p16) -> Py_Any { return VEHICLE::CREATE_SCRIPT_VEHICLE_GENERATOR(x,y,z,heading,p4,p5,modelHash.id,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16); })
		.def_static("create_vehicle", [](Py_Hash modelHash,float x,float y,float z,float heading,BOOL networkHandle,BOOL vehiclehandle) -> Py_Vehicle { return VEHICLE::CREATE_VEHICLE(modelHash.id,x,y,z,heading,networkHandle,vehiclehandle); })
		.def_static("delete_all_trains", []() -> void { return VEHICLE::DELETE_ALL_TRAINS(); })
		.def_static("delete_script_generator", [](Py_Any vehicleGenerator) -> void { return VEHICLE::DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator.id); })
		.def_static("disable_plane_aileron", [](Py_Any p0,BOOL p1,BOOL p2) -> void { return VEHICLE::DISABLE_PLANE_AILERON(p0.id,p1,p2); })
		.def_static("disable_weapon", [](BOOL disabled,Py_Hash weaponHash,Py_Vehicle vehicle,Py_Ped owner) -> void { return VEHICLE::DISABLE_VEHICLE_WEAPON(disabled,weaponHash.id,vehicle.id,owner.id); })
		.def_static("does_exist_with_decorator", [](char* decorator) -> BOOL { return VEHICLE::DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator); })
		.def_static("does_have_stuck_check", [](Py_Any p0) -> BOOL { return VEHICLE::DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(p0.id); })
		.def_static("does_script_generator_exist", [](Py_Any vehicleGenerator) -> BOOL { return VEHICLE::DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator.id); })
		.def_static("get_body_health_2", [](Py_Any p0) -> float { return VEHICLE::_GET_VEHICLE_BODY_HEALTH_2(p0.id); })
		.def_static("get_class_from_name", [](Py_Hash modelHash) -> int { return VEHICLE::GET_VEHICLE_CLASS_FROM_NAME(modelHash.id); })
		.def_static("get_class_max_acceleration", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_ACCELERATION(p0.id); })
		.def_static("get_class_max_agility", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_AGILITY(p0.id); })
		.def_static("get_class_max_braking", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_BRAKING(p0.id); })
		.def_static("get_class_max_traction", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_CLASS_MAX_TRACTION(p0.id); })
		.def_static("get_closest_vehicle", [](float x,float y,float z,float radius,Py_Hash modelHash,int flags) -> Py_Vehicle { return VEHICLE::GET_CLOSEST_VEHICLE(x,y,z,radius,modelHash.id,flags); })
		.def_static("get_current_playback_for_vehicle", [](Py_Any p0) -> Py_Any { return VEHICLE::GET_CURRENT_PLAYBACK_FOR_VEHICLE(p0.id); })
		.def_static("get_display_name_from_model", [](Py_Hash modelHash) -> char* { return VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash.id); })
		.def_static("get_max_speed", [](Py_Hash modelHash) -> float { return VEHICLE::_GET_VEHICLE_MAX_SPEED(modelHash.id); })
		.def_static("get_model_acceleration", [](Py_Any p0) -> float { return VEHICLE::GET_VEHICLE_MODEL_ACCELERATION(p0.id); })
		.def_static("get_model_max_braking", [](Py_Hash modelHash) -> float { return VEHICLE::GET_VEHICLE_MODEL_MAX_BRAKING(modelHash.id); })
		.def_static("get_model_max_number_of_passengers", [](Py_Hash VehicleModel) -> int { return VEHICLE::_GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS(VehicleModel.id); })
		.def_static("get_model_max_traction", [](Py_Hash modelHash) -> float { return VEHICLE::GET_VEHICLE_MODEL_MAX_TRACTION(modelHash.id); })
		.def_static("get_num_mod_colors", [](Py_Any p0,BOOL p1) -> Py_Any { return VEHICLE::GET_NUM_MOD_COLORS(p0.id,p1); })
		.def_static("get_num_window_tints", []() -> int { return VEHICLE::GET_NUM_VEHICLE_WINDOW_TINTS(); })
		.def_static("get_number_of_number_plates", []() -> Py_Any { return VEHICLE::GET_NUMBER_OF_VEHICLE_NUMBER_PLATES(); })
		.def_static("get_position_in_recording", [](Py_Any p0) -> float { return VEHICLE::GET_POSITION_IN_RECORDING(p0.id); })
		.def_static("get_random_back_bumper_in_sphere", [](float p0,float p1,float p2,float p3,int p4,int p5,int p6) -> Py_Vehicle { return VEHICLE::GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0,p1,p2,p3,p4,p5,p6); })
		.def_static("get_random_front_bumper_in_sphere", [](float p0,float p1,float p2,float p3,int p4,int p5,int p6) -> Py_Vehicle { return VEHICLE::GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0,p1,p2,p3,p4,p5,p6); })
		.def_static("get_random_in_sphere", [](float x,float y,float z,float radius,Py_Hash modelHash,int flags) -> Py_Vehicle { return VEHICLE::GET_RANDOM_VEHICLE_IN_SPHERE(x,y,z,radius,modelHash.id,flags); })
		.def_static("get_time_position_in_recording", [](Py_Any p0) -> float { return VEHICLE::GET_TIME_POSITION_IN_RECORDING(p0.id); })
		.def_static("get_total_duration_of_recording", [](Py_Any p0,Py_Any p1) -> Py_Any { return VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(p0.id,p1.id); })
		.def_static("get_total_duration_of_recording_id", [](Py_Any p0) -> float { return VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(p0.id); })
		.def_static("has_asset_loaded", [](int vehicleAsset) -> BOOL { return VEHICLE::HAS_VEHICLE_ASSET_LOADED(vehicleAsset); })
		.def_static("has_preload_mods_finished", [](Py_Any p0) -> BOOL { return VEHICLE::HAS_PRELOAD_MODS_FINISHED(p0.id); })
		.def_static("is_any_near_point", [](float x,float y,float z,float radius) -> BOOL { return VEHICLE::IS_ANY_VEHICLE_NEAR_POINT(x,y,z,radius); })
		.def_static("is_cop_in_area_3d", [](float x1,float x2,float y1,float y2,float z1,float z2) -> BOOL { return VEHICLE::IS_COP_VEHICLE_IN_AREA_3D(x1,x2,y1,y2,z1,z2); })
		.def_static("is_heli_part_broken", [](Py_Any p0,BOOL p1,BOOL p2,BOOL p3) -> BOOL { return VEHICLE::IS_HELI_PART_BROKEN(p0.id,p1,p2,p3); })
		.def_static("is_high_detail", [](Py_Any p0) -> BOOL { return VEHICLE::IS_VEHICLE_HIGH_DETAIL(p0.id); })
		.def_static("is_in_garage_area", [](char* garageName,Py_Vehicle vehicle) -> BOOL { return VEHICLE::IS_VEHICLE_IN_GARAGE_AREA(garageName,vehicle.id); })
		.def_static("is_playback_going_on_for_vehicle", [](Py_Any p0) -> BOOL { return VEHICLE::IS_PLAYBACK_GOING_ON_FOR_VEHICLE(p0.id); })
		.def_static("is_playback_using_ai_going_on_for_vehicle", [](Py_Any p0) -> BOOL { return VEHICLE::IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(p0.id); })
		.def_static("is_this_model_a_bicycle", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_BICYCLE(model.id); })
		.def_static("is_this_model_a_bike", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_BIKE(model.id); })
		.def_static("is_this_model_a_boat", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_BOAT(model.id); })
		.def_static("is_this_model_a_car", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_CAR(model.id); })
		.def_static("is_this_model_a_heli", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_HELI(model.id); })
		.def_static("is_this_model_a_plane", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_PLANE(model.id); })
		.def_static("is_this_model_a_quadbike", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_QUADBIKE(model.id); })
		.def_static("is_this_model_a_submersible", [](Py_Hash model) -> BOOL { return VEHICLE::_IS_THIS_MODEL_A_SUBMERSIBLE(model.id); })
		.def_static("is_this_model_a_train", [](Py_Hash model) -> BOOL { return VEHICLE::IS_THIS_MODEL_A_TRAIN(model.id); })
		.def_static("open_bomb_bay", [](Py_Any p0) -> void { return VEHICLE::_OPEN_VEHICLE_BOMB_BAY(p0.id); })
		.def_static("pause_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::PAUSE_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("preload_mod", [](Py_Any p0,Py_Any p1,Py_Any p2) -> void { return VEHICLE::PRELOAD_VEHICLE_MOD(p0.id,p1.id,p2.id); })
		.def_static("release_preload_mods", [](Py_Any p0) -> void { return VEHICLE::RELEASE_PRELOAD_MODS(p0.id); })
		.def_static("remove_asset", [](Py_Any p0) -> void { return VEHICLE::REMOVE_VEHICLE_ASSET(p0.id); })
		.def_static("remove_high_detail_model", [](Py_Any p0) -> void { return VEHICLE::REMOVE_VEHICLE_HIGH_DETAIL_MODEL(p0.id); })
		.def_static("remove_stuck_check", [](Py_Any p0) -> void { return VEHICLE::REMOVE_VEHICLE_STUCK_CHECK(p0.id); })
		.def_static("remove_vehicles_from_generators_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,Py_Any unk) -> void { return VEHICLE::REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1,y1,z1,x2,y2,z2,unk.id); })
		.def_static("request_asset", [](Py_Hash VehicleHash,int vehicleAsset) -> void { return VEHICLE::REQUEST_VEHICLE_ASSET(VehicleHash.id,vehicleAsset); })
		.def_static("request_high_detail_model", [](Py_Any p0) -> void { return VEHICLE::REQUEST_VEHICLE_HIGH_DETAIL_MODEL(p0.id); })
		.def_static("reset_wheels", [](Py_Any p0,BOOL p1) -> void { return VEHICLE::RESET_VEHICLE_WHEELS(p0.id,p1); })
		.def_static("set_all_generators_active", []() -> void { return VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE(); })
		.def_static("set_all_generators_active_in_area", [](float x1,float y1,float z1,float x2,float y2,float z2,BOOL p6,BOOL p7) -> void { return VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1,y1,z1,x2,y2,z2,p6,p7); })
		.def_static("set_all_low_priority_generators_active", [](BOOL active) -> void { return VEHICLE::SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active); })
		.def_static("set_density_multiplier_this_frame", [](float multiplier) -> void { return VEHICLE::SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier); })
		.def_static("set_far_draw_vehicles", [](BOOL toggle) -> void { return VEHICLE::SET_FAR_DRAW_VEHICLES(toggle); })
		.def_static("set_garbage_trucks", [](BOOL toggle) -> void { return VEHICLE::SET_GARBAGE_TRUCKS(toggle); })
		.def_static("set_model_is_suppressed", [](Py_Hash model,BOOL suppressed) -> void { return VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(model.id,suppressed); })
		.def_static("set_number_of_parked_vehicles", [](int value) -> void { return VEHICLE::SET_NUMBER_OF_PARKED_VEHICLES(value); })
		.def_static("set_parked_density_multiplier_this_frame", [](float multiplier) -> void { return VEHICLE::SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier); })
		.def_static("set_plane_min_height_above_terrain", [](Py_Any p0,Py_Any p1) -> void { return VEHICLE::_SET_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(p0.id,p1.id); })
		.def_static("set_playback_speed", [](Py_Any p0,float speed) -> void { return VEHICLE::SET_PLAYBACK_SPEED(p0.id,speed); })
		.def_static("set_playback_to_use_ai", [](Py_Any p0,Py_Any p1) -> void { return VEHICLE::SET_PLAYBACK_TO_USE_AI(p0.id,p1.id); })
		.def_static("set_playback_to_use_ai_try_to_revert_back_later", [](Py_Any p0,Py_Any p1,Py_Any p2,BOOL p3) -> void { return VEHICLE::SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(p0.id,p1.id,p2.id,p3); })
		.def_static("set_random_boats", [](BOOL toggle) -> void { return VEHICLE::SET_RANDOM_BOATS(toggle); })
		.def_static("set_random_density_multiplier_this_frame", [](float multiplier) -> void { return VEHICLE::SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier); })
		.def_static("set_random_trains", [](BOOL unk) -> void { return VEHICLE::SET_RANDOM_TRAINS(unk); })
		.def_static("set_script_generator", [](Py_Any vehicleGenerator,BOOL enabled) -> void { return VEHICLE::SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator.id,enabled); })
		.def_static("set_shoot_at_target", [](Py_Ped pilot,Py_Entity ent,float targetx,float targety,float targetz) -> void { return VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot.id,ent.id,targetx,targety,targetz); })
		.def_static("set_wheels_can_break_off_when_blow_up", [](Py_Any p0,BOOL p1) -> void { return VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(p0.id,p1); })
		.def_static("skip_time_in_playback_recorded_vehicle", [](Py_Any p0,float p1) -> void { return VEHICLE::SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(p0.id,p1); })
		.def_static("skip_to_end_and_stop_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("stop_all_garage_activity", []() -> void { return VEHICLE::STOP_ALL_GARAGE_ACTIVITY(); })
		.def_static("stop_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::STOP_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("switch_train_track", [](int intersectionId,BOOL state) -> void { return VEHICLE::SWITCH_TRAIN_TRACK(intersectionId,state); })
		.def_static("unpause_playback_recorded_vehicle", [](Py_Any p0) -> void { return VEHICLE::UNPAUSE_PLAYBACK_RECORDED_VEHICLE(p0.id); })
		.def_static("was_counter_activated", [](Py_Any p0,Py_Any p1) -> BOOL { return VEHICLE::WAS_COUNTER_ACTIVATED(p0.id,p1.id); })
;